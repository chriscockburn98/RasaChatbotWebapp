const QueryAction = require('../models/QueryAction')
const Account = require('../models/Account')
const ObjectId = require('mongoose').Types.ObjectId;

function getMostFrequentIntents() {
  return new Promise((resolve, reject) => {
    QueryAction.aggregate([
      {
        "$group": {
          "_id": {
            "response_utter": "$response_utter",
          },
          "count": {
            "$sum": 1
          }
        }
      },
      {
        "$group": {
          "_id": {
            "response_utter": "$_id.response_utter"
          },
          "count": {
            "$first": "$count"
          }
        }
      }
    ])
    .sort({ count: -1 })
    .then(res => resolve(res), err => reject(err))
    .catch(err => reject(err))
  })
}

function getCurrentUsers() {
  return new Promise((resolve, reject) => {
    Account.find()
    .then(res => resolve(res), err => reject(err))
    .catch(err => reject(err))
  })
}

function deleteAccount(accountId) {
  return new Promise((resolve, reject) => {
    Account.deleteOne({ _id : ObjectId(accountId)})
    .then(res => resolve(res), err => reject(err))
    .catch(err => reject(err))
  })
}

function notRelevantQueries() {
  return new Promise((resolve, reject) => {
    QueryAction.find({ isRelevant: "no" })
    .then(res => resolve(res), err => reject(err))
    .catch(err => reject(err))
  })
}

function createAccount(data) {
  return new Promise((resolve, reject) => {
    const account = {
      username: data.username,
      password: data.password,
      accountType: data.accountType,
    }
    console.log(account)

    Account.create(account)
    .then(res => resolve(res), err => reject(err))
    .catch(err => reject(err))
  })
}

module.exports = {
	getMostFrequentIntents,
  getCurrentUsers,
  deleteAccount,
  notRelevantQueries,
  createAccount,
}